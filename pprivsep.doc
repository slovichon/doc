<?xml version="1.0" ?>
<!-- $Id$ -->

<doc>
	<title>Personal Privilege Separation</title>
	<sum>
		With the acception of the long-term inevitibility of having to
		deal with software bugs and exploits, more incident prevention
		techniques must be leveraged to order to secure data rather
		than continuation of
		fix explicit bugs.  There will always be bugs.  The solution
		is not to find them all; that is more of a endless battle.
		The proper solution is to combine a variety of techniques,
		including continually fixing explicit bugs, along with
		further techniques to minimize impact when bugs are exploited
		in order to maximize security.
	</sum>
	<sect>
		<h>Overview</h>
		<p>
			Having all programs, including many that use network communication
			to perform their functionality, all run with the same privileges,
			where many do not need such privileges, can expose personal data
			to a greater chance of being lost or unintentionally accessed.
			This approach is practiced, however, for the same reasons that all
			security techniques are mitigated -- because it is convenient for
			the user.  On the other hand, if a setup exists that is both
			secure and convenient for users, a major barrier towards reaching
			better security practice can be surpassed.
		</p>
		<p>
			Traditional Unix mottos includes ``do one thing well'' and ``only
			give as few privileges as are required to complete a task.''  Over
			the years, these defining mottos that made Unix what it was have
			become laxed.  The intent of this document is not to state what
			Unix is or isn't, but instead to try and recapture some of
			definitive Unix methodology and reapply it.
		</p>
		<p>
			An ideal approach would allow only programs that <sy>need</sy> to
			share files with other programs to do so.  However, implementing
			such a strategy would require a mechanism for maintainence of the
			policy rules of specifying which program should access which
			files and which files should be allowed to be accessed by other
			programs.  This would clearly be a mess, so this approach is
			reserved until another approach or an alternative but acceptable
			strategy is found.
		</p>
		<p>
			The mechanism described here is to have two user accounts instead
			of one per logical user.  The ``main'' account will replace the
			traditional single account for trustworthy programs, and a new
			``shadow'' account will be introduced for use by riskier programs
			that do not need the full privileges of the ``main'' account, and
			will instead be run in a safer, or less impactful, environment.
		</p>
		<p>
			Since many personal computers and workstations have exclusively
			one or only a handful of users, the overhead of twice as many user
			accounts should not be much.  This strategy will probably not work
			on large machines with many users, but in that case, users will
			hopefully keep backups of personal data on personal machines.
		</p>
	</sect>
	<sect>
		<h>Examples</h>
			<p>
				First, a shadow account for the target user must be created.
				On a particular system, such an account from
				<path>/etc/passwd</path> looks like this:
			</p>
<pre>
_jaredy:*:201:201:Jared J. Yanovich (privsep):/home/jaredy/.priv:/sbin/nologin
</pre>
			<p>
				On systems that have both a master and shadow password file,
				make sure both are updated.
			</p>
			<p>
				A group that both the main and shadow user need to be a part of
				needs to be created as well.
				The following is an excerpt from <path>/etc/group</path>:
			</p>
<pre>
_jaredy:*:201:jaredy
</pre>
			<p>
				Next, <tt>sudo(8)</tt> needs to be configured to allow the main
				user to invoke programs that run under the privileges of the
				shadow account (but, obviously, not the other way around).
				Such configuration may look like:
			</p>
<pre>
jaredy _jaredy=(ALL) NOPASSWD: ALL
</pre>
			<p>
				Remember to use the <tt>visudo(8)</tt> program when editing the
				<path>/etc/sudoers</path> file.
			</p>
			<p>
				Next, permissions on the shadow home directory need to be set up.
<pre>
# cd /home/jaredy
# mkdir .priv
# chmod 775 .priv
# chown _jaredy:_jaredy .priv
</pre>
			</p>
			<p>
				Finally, a program that will run under the shadow privileges can
				be invoked through <tt>sudo(8)</tt>:
			</p>
<pre>
$ env HOME=~/.priv sudo -u _${USER} mozilla "$@"
</pre>
			<p>
				Or, more generically, a wrapper can be made to invoke any program
				through a <em>privilege wrapper</em>, such as
				<path>~/bin/priv</path>:
			</p>
<pre>
#!/bin/sh

prog=$1
shift

exec env HOME=~/.priv sudo -u _$USER $prog "$@"
</pre>
			<p>
				And now this script can be used to simplify the invocation of
				programs that are to have privileges isolated.
				Here is a sample excerpt from <path>~/.fluxbox/menu</path> that
				allows easy invocation of an IRC client:
			</p>
<pre>
[submenu] (Net)
	[exec] (irssi) {xterm -title irssi -e ~/bin/priv irssi &amp;}
[end]
</pre>
			<p>
				Likewise, here are some more samples from <tt>~/.bashrc</tt> that
				ease invocation of such programs:
			</p>
<pre>
alias gaim="~/bin/priv gaim"
alias sylpheed="~/bin/priv sylpheed"
alias xmms="~/bin/priv xmms"
alias gkrellm="~/bin/priv gkrellm"
</pre>
			<p>
				Many programs can not be configured to use this technique, but
				those that can and are greatly reduce the chance of disaster
				from spreading when something goes wrong, especially programs
				like Mozilla where there is just too much code audit it all.
				Program such as text editors and argubly mail clients may be
				used for so much file I/O that it will probably be infeasible
				to set them up in this manner.
			</p>
	</sect>
</doc>
