<?xml version="1.0" ?>
<!-- $Id$ -->

<doc>
	<title>Personal Privilege Separation</title>
	<sum>
		With the acceptable of the long-term inevitibility of software
		bugs and exploits, further prevention techniques must be
		leveraged to order to secure data rather than continuing to
		fix explicit bugs.  There will always be bugs.  The solution
		is not to find them all; that is more of a endless battle.
		The proper solution is to combine a variety of techniques,
		including continually fixing explicit bugs, along with
		further techniques to minimize impact when bugs are exploited
		in order to maximize security.
	</sum>
	<sect>
		<h>Overview</h>
		<p>
			Running many different applications, including many
			that use network communication to perform their
			functionality, all with the same privileges is not a
			good idea.  It is done, however, because of the same
			reasons that all security techniques are mitigated --
			because it is convenient for the end user.  If such
			a setup is both secure and convenient, a major barrier
			towards reaching better security practice can be
			surpassed.
		</p>
		<p>
			One of the original, defining mottos of the Unix
			culture was that of ``do one thing well.''  In fact,
			that is why the name ``Unix'' was chosen after the
			disaster that was Multics.  Over the years, the
			defining strategies that made Unix what it has
			become have become lax.  The intent of this
			document is not to state what Unix is or isn't,
			but rather to try and recapture some of definitive
			Unix methodology and reapply it.
		</p>
		<p>
			An ideal approach would allow only programs that
			<sy>need</sy> to share files with other programs to
			do so.  However, implementing such a strategy would
			require a mechanism for maintainence the policy
			rules of which program should access which files, and
			which files should be allowed to be accessed with other
			programs.  This would clearly be a mess, and is reserved
			until another approach or an acceptable strategy is
			derived
		</p>
		<p>
			The mechanism described here is to have two user
			accounts instead of one per logical user.  Since many
			personal computers and workstations have exclusively
			one user or only a handful, the overhead of twice as
			many user accounts should not be much.  The strategy
			is to have one main account and another shadow account
			where more risky programs intended to be run by the
			user can be run in safer, or less impactful, environment.
		</p>
		<p>
			A parallel to this strategy is applied to many daemon
			programs in the OpenBSD operating system.  For example,
			instead of having all DHCP packet processing done as
			root, the main DHCP daemon creates another process.
			This child process changes its privileges to the shadow
			DHCP account, which will let that process run as a
			different user from that of the root account.
			This is a very effective strategy:  only data from
			the child is communicated back to the main DHCP
			process, and only the main process needs to run
			as root (writing to files in <path>/var</path>, or
			listening on UDP port 68 sockets, for example) and conduct a
			minimal set of operations.  If an error in the code
			occurs, there is a greater chance that it will be
			in the code run by the unprivileged process, rather
			than by that of of the root process, which will
			minimize the impact of the problem.
		</p>
		<p>
			
		</p>
	</sect>
	<sect>
		<h>Examples</h>
			<p>
				First, a shadow account for the target user must be created.
				On a particular system, such an account from
				<path>/etc/passwd</path> looks like this:
			</p>
<pre>
_jaredy:*:201:201:Jared J. Yanovich (privsep):/home/jaredy/.priv:/sbin/nologin
</pre>
			<p>
				On systems that have both a master and shadow password file,
				make sure both are updated.
			</p>
			<p>
				A group that both the main and shadow user need to be a part of
				needs to be created as well.
				The following is an excerpt from <path>/etc/group</path>.
			</p>
<pre>
_jaredy:*:201:jaredy
</pre>
			<p>
				Next, <tt>sudo(8)</tt> needs to be configured to allow the main
				user to invoke programs that run under the privileges of the
				shadow account (but, obviously, not the other way around).
				Such configuration may look like:
			</p>
<pre>
jaredy _jaredy=(ALL) NOPASSWD: ALL
</pre>
			<p>
				Remember to use the <tt>visudo(8)</tt> program when editing the
				<path>sudoers</path> file.
			</p>
			<p>
				Next, permissions on the shadow home directory need to be set up.
<pre>
# cd /home/jaredy
# mkdir .priv
# chmod 775 .priv
# chown _jaredy:_jaredy .priv
</pre>
			</p>
			<p>
				Finally, a program can be invoked through <tt>sudo(8)</tt>:
			</p>
<pre>
$ env HOME=~/.priv sudo -u _${USER} mozilla "$@"
</pre>
			<p>
				Or more generically, a wrapper can be made to invoke any program
				through a <em>privilege wrapper</em>, such as
				<path>~/bin/priv</path>:
			</p>
<pre>
#!/bin/sh

prog=$1
shift

exec env HOME=~/.priv sudo -u _$USER $prog "$@"
</pre>
			<p>
				And now this script can be used to simplify the invocation of
				programs that are to have privileges separated.
				Here is a sample excerpt from <path>~/.fluxbox/menu</path> that
				allows easy invocation of an IRC client:
			</p>
<pre>
[submenu] (Net)
	[exec] (irssi) {xterm -title irssi -e ~/bin/priv irssi &amp;}
[end]
</pre>
	</sect>
</doc>
